import React, { useState, useEffect } from 'react';
import './AudioPlayer.css';
import hendphn from "./headph.png";

const PlayIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M8 5v14l11-7z"/></svg>;
const PauseIcon = () => <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>;
const RewindIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor"><path d="M11 18V6l-8.5 6 8.5 6zm-2-6 8.5 6V6l-8.5 6z"/></svg>;
const ForwardIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor"><path d="m4 18 8.5-6L4 6v12zm9-12v12l8.5-6L13 6z"/></svg>;
const DownloadIcon = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/></svg>;

const formatTime = (time) => {
  if (isNaN(time) || time < 0) return '0:00';
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return `${minutes}:${String(seconds).padStart(2, '0')}`;
};

function AudioPlayer({ src, audioRef, isPlaying, onPlay, onPause, disabled = false }) {
    const [duration, setDuration] = useState(0);
    const [currentTime, setCurrentTime] = useState(0);

    const handlePlayPause = () => isPlaying ? audioRef.current.pause() : audioRef.current.play();
    const handleRewind = () => audioRef.current.currentTime -= 10;
    const handleForward = () => audioRef.current.currentTime += 10;
    
    const handleDownload = () => {
        const link = document.createElement('a');
        link.href = src;
        link.setAttribute('download', 'podcast.mp3');
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    useEffect(() => {
        const audio = audioRef.current;
        if (!audio) return;

        const handleTimeUpdate = () => setCurrentTime(audio.currentTime);
        const handleLoadedMetadata = () => setDuration(audio.duration);

        audio.addEventListener('play', onPlay);
        audio.addEventListener('pause', onPause);
        audio.addEventListener('ended', onPause);
        audio.addEventListener('timeupdate', handleTimeUpdate);
        audio.addEventListener('loadedmetadata', handleLoadedMetadata);

        return () => {
            audio.removeEventListener('play', onPlay);
            audio.removeEventListener('pause', onPause);
            audio.removeEventListener('ended', onPause);
            audio.removeEventListener('timeupdate', handleTimeUpdate);
            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
        };
    }, [audioRef, onPlay, onPause]);

    const progress = duration > 0 ? (currentTime / duration) : 0;
    const progressArcLength = Math.PI * 110;
    const strokeDashoffset = progressArcLength * (1 - progress);

    return (
        <div className={`audio-player ${disabled ? 'disabled' : ''}`}>
            <div className={`player-glow ${isPlaying ? 'active' : ''}`} />

            <button className="icon-btn download-btn" onClick={handleDownload} aria-label="Download Podcast" disabled={disabled}>
                <DownloadIcon />
            </button>
            
            <div className="visualizer">
                <img className="headphone-img" src={hendphn} alt="Headphone" />
                <div className="progress-arc">
                    <svg width="260" height="130" viewBox="0 0 260 130">
                        <path d="M20 120 A 110 110 0 0 1 240 120" className="progress-bg" />
                        <path
                            d="M20 120 A 110 110 0 0 1 240 120"
                            className="progress-fg"
                            style={{ strokeDasharray: progressArcLength, strokeDashoffset }}
                        />
                    </svg>
                </div>
            </div>

            <div className="player-details">
                <div className="time-display">{formatTime(currentTime)} / {formatTime(duration)}</div>
                <div className="track-info">
                    <p>Generated by Stream2Pod</p>
                </div>
            </div>

            <div className="controls">
                <button className="control-btn" onClick={handleRewind} aria-label="Rewind 10 seconds" disabled={disabled}><RewindIcon /></button>
                <button className="control-btn play-pause" onClick={handlePlayPause} aria-label={isPlaying ? "Pause" : "Play"} disabled={disabled}>
                    {isPlaying ? <PauseIcon /> : <PlayIcon />}
                </button>
                <button className="control-btn" onClick={handleForward} aria-label="Forward 10 seconds" disabled={disabled}><ForwardIcon /></button>
            </div>

            <audio ref={audioRef} src={src} preload="metadata" style={{ display: 'none' }} />
        </div>
    );
}
 
export default AudioPlayer;
